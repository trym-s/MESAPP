// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Streaming.Database;

#nullable disable

namespace Streaming.Migrations
{
    [DbContext(typeof(StreamingDbContext))]
    [Migration("20250428202828_InitSensorStreaming")]
    partial class InitSensorStreaming
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Streaming.Entities.SensorData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("SensorTypeId")
                        .HasColumnType("integer");

                    b.Property<double>("SensorValue")
                        .HasPrecision(18, 4)
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("WorkorderId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkstationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("sensor_data", "mes_db");
                });
#pragma warning restore 612, 618
        }
    }
}
